{"version":3,"file":"query-Dj9UOrgE.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/query/match/utils.js","../../../../node_modules/@nuxt/content/dist/runtime/query/query.js","../../../../node_modules/@nuxt/content/dist/runtime/utils/json.js","../../../../node_modules/@nuxt/content/dist/runtime/utils/query.js","../../../../node_modules/@nuxt/content/dist/runtime/composables/utils.js","../../../../node_modules/@nuxt/content/dist/runtime/legacy/composables/query.js"],"sourcesContent":["export const get = (obj, path) => path.split(\".\").reduce((acc, part) => acc && acc[part], obj);\nconst _pick = (obj, condition) => Object.keys(obj).filter(condition).reduce((newObj, key) => Object.assign(newObj, { [key]: obj[key] }), {});\nexport const pick = (keys) => (obj) => keys && keys.length ? _pick(obj, (key) => keys.includes(key)) : obj;\nexport const omit = (keys) => (obj) => keys && keys.length ? _pick(obj, (key) => !keys.includes(key)) : obj;\nexport const apply = (fn) => (data) => Array.isArray(data) ? data.map((item) => fn(item)) : fn(data);\nexport const detectProperties = (keys) => {\n  const prefixes = [];\n  const properties = [];\n  for (const key of keys) {\n    if ([\"$\", \"_\"].includes(key)) {\n      prefixes.push(key);\n    } else {\n      properties.push(key);\n    }\n  }\n  return { prefixes, properties };\n};\nexport const withoutKeys = (keys = []) => (obj) => {\n  if (keys.length === 0 || !obj) {\n    return obj;\n  }\n  const { prefixes, properties } = detectProperties(keys);\n  return _pick(obj, (key) => !properties.includes(key) && !prefixes.includes(key[0]));\n};\nexport const withKeys = (keys = []) => (obj) => {\n  if (keys.length === 0 || !obj) {\n    return obj;\n  }\n  const { prefixes, properties } = detectProperties(keys);\n  return _pick(obj, (key) => properties.includes(key) || prefixes.includes(key[0]));\n};\nexport const sortList = (data, params) => {\n  const comperable = new Intl.Collator(params.$locale, {\n    numeric: params.$numeric,\n    caseFirst: params.$caseFirst,\n    sensitivity: params.$sensitivity\n  });\n  const keys = Object.keys(params).filter((key) => !key.startsWith(\"$\"));\n  for (const key of keys) {\n    data = data.sort((a, b) => {\n      const values = [get(a, key), get(b, key)].map((value) => {\n        if (value === null) {\n          return void 0;\n        }\n        if (value instanceof Date) {\n          return value.toISOString();\n        }\n        return value;\n      });\n      if (params[key] === -1) {\n        values.reverse();\n      }\n      return comperable.compare(values[0], values[1]);\n    });\n  }\n  return data;\n};\nexport const assertArray = (value, message = \"Expected an array\") => {\n  if (!Array.isArray(value)) {\n    throw new TypeError(message);\n  }\n};\nexport const ensureArray = (value) => {\n  return Array.isArray(value) ? value : [void 0, null].includes(value) ? [] : [value];\n};\n","import { ensureArray } from \"./match/utils.js\";\nconst arrayParams = [\"sort\", \"where\", \"only\", \"without\"];\nexport function createQuery(fetcher, opts = {}) {\n  const queryParams = {};\n  for (const key of Object.keys(opts.initialParams || {})) {\n    queryParams[key] = arrayParams.includes(key) ? ensureArray(opts.initialParams[key]) : opts.initialParams[key];\n  }\n  const $set = (key, fn = (v) => v) => {\n    return (...values) => {\n      queryParams[key] = fn(...values);\n      return query;\n    };\n  };\n  const resolveResult = (result) => {\n    if (opts.legacy) {\n      if (result?.surround) {\n        return result.surround;\n      }\n      if (!result) {\n        return result;\n      }\n      if (result?.dirConfig) {\n        result.result = {\n          _path: result.dirConfig?._path,\n          ...result.result,\n          _dir: result.dirConfig\n        };\n      }\n      return result?._path || Array.isArray(result) || !Object.prototype.hasOwnProperty.call(result, \"result\") ? result : result?.result;\n    }\n    return result;\n  };\n  const query = {\n    params: () => ({\n      ...queryParams,\n      ...queryParams.where ? { where: [...ensureArray(queryParams.where)] } : {},\n      ...queryParams.sort ? { sort: [...ensureArray(queryParams.sort)] } : {}\n    }),\n    only: $set(\"only\", ensureArray),\n    without: $set(\"without\", ensureArray),\n    where: $set(\"where\", (q) => [...ensureArray(queryParams.where), ...ensureArray(q)]),\n    sort: $set(\"sort\", (sort) => [...ensureArray(queryParams.sort), ...ensureArray(sort)]),\n    limit: $set(\"limit\", (v) => parseInt(String(v), 10)),\n    skip: $set(\"skip\", (v) => parseInt(String(v), 10)),\n    // find\n    find: () => fetcher(query).then(resolveResult),\n    findOne: () => fetcher($set(\"first\")(true)).then(resolveResult),\n    count: () => fetcher($set(\"count\")(true)).then(resolveResult),\n    // locale\n    locale: (_locale) => query.where({ _locale }),\n    withSurround: $set(\"surround\", (surroundQuery, options) => ({ query: surroundQuery, ...options })),\n    withDirConfig: () => $set(\"dirConfig\")(true)\n  };\n  if (opts.legacy) {\n    query.findSurround = (surroundQuery, options) => {\n      return query.withSurround(surroundQuery, options).find().then(resolveResult);\n    };\n    return query;\n  }\n  return query;\n}\n","export function jsonStringify(value) {\n  return JSON.stringify(value, regExpReplacer);\n}\nexport function jsonParse(value) {\n  return JSON.parse(value, regExpReviver);\n}\nfunction regExpReplacer(_key, value) {\n  if (value instanceof RegExp) {\n    return `--REGEX ${value.toString()}`;\n  }\n  return value;\n}\nfunction regExpReviver(_key, value) {\n  const withOperator = typeof value === \"string\" && value.match(/^--([A-Z]+) (.+)$/) || [];\n  if (withOperator[1] === \"REGEX\") {\n    const regex = withOperator[2]?.match(/\\/(.*)\\/([dgimsuy]*)$/);\n    return regex?.[1] ? new RegExp(regex[1], regex[2] || \"\") : value;\n  }\n  return value;\n}\n","import { getQuery, createError } from \"h3\";\nimport { jsonParse, jsonStringify } from \"./json.js\";\nconst parseJSONQueryParams = (body) => {\n  try {\n    return jsonParse(body);\n  } catch {\n    throw createError({ statusCode: 400, message: \"Invalid _params query\" });\n  }\n};\nexport const encodeQueryParams = (params) => {\n  let encoded = jsonStringify(params);\n  encoded = typeof Buffer !== \"undefined\" ? Buffer.from(encoded).toString(\"base64\") : btoa(encoded);\n  encoded = encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  const chunks = encoded.match(/.{1,100}/g) || [];\n  return chunks.join(\"/\");\n};\nexport const decodeQueryParams = (encoded) => {\n  encoded = encoded.replace(/\\//g, \"\");\n  encoded = encoded.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  encoded = encoded.padEnd(encoded.length + (4 - encoded.length % 4) % 4, \"=\");\n  return parseJSONQueryParams(typeof Buffer !== \"undefined\" ? Buffer.from(encoded, \"base64\").toString() : atob(encoded));\n};\nconst memory = {};\nexport const getContentQuery = (event) => {\n  const { params } = event.context.params || {};\n  if (params) {\n    return decodeQueryParams(params.replace(/.json$/, \"\"));\n  }\n  const qid = event.context.params?.qid?.replace(/.json$/, \"\");\n  const query = getQuery(event) || {};\n  if (qid && query._params) {\n    memory[qid] = parseJSONQueryParams(decodeURIComponent(query._params));\n    if (memory[qid]?.where && !Array.isArray(memory[qid]?.where)) {\n      memory[qid].where = [memory[qid].where];\n    }\n    return memory[qid];\n  }\n  if (qid && memory[qid]) {\n    return memory[qid];\n  }\n  if (query._params) {\n    return parseJSONQueryParams(decodeURIComponent(query._params));\n  }\n  if (typeof query.only === \"string\" && query.only.includes(\",\")) {\n    query.only = query.only.split(\",\").map((s) => s.trim());\n  }\n  if (typeof query.without === \"string\" && query.without.includes(\",\")) {\n    query.without = query.without.split(\",\").map((s) => s.trim());\n  }\n  const where = query.where || {};\n  for (const key of [\"draft\", \"partial\", \"empty\"]) {\n    if (query[key] && [\"true\", \"false\"].includes(query[key])) {\n      where[key] = query[key] === \"true\";\n      delete query[key];\n    }\n  }\n  if (query.sort) {\n    query.sort = String(query.sort).split(\",\").map((s) => {\n      const [key, order] = s.split(\":\");\n      return [key, Number.parseInt(order || \"0\", 10)];\n    });\n  }\n  const reservedKeys = [\"partial\", \"draft\", \"only\", \"without\", \"where\", \"sort\", \"limit\", \"skip\"];\n  for (const key of Object.keys(query)) {\n    if (reservedKeys.includes(key)) {\n      continue;\n    }\n    query.where = query.where || {};\n    query.where[key] = query[key];\n  }\n  if (Object.keys(where).length > 0) {\n    query.where = [where];\n  } else {\n    delete query.where;\n  }\n  return query;\n};\n","import { withBase } from \"ufo\";\nimport { useContentPreview } from \"./preview.js\";\nimport { useRuntimeConfig, useRequestEvent } from \"#imports\";\nexport const withContentBase = (url) => withBase(url, useRuntimeConfig().public.content.api.baseURL);\nexport const useContentDisabled = () => {\n  console.warn(\"useContent is only accessible when you are using `documentDriven` mode.\");\n  console.warn(\"Learn more by visiting: https://content.nuxt.com/document-driven\");\n  throw new Error(\"useContent is only accessible when you are using `documentDriven` mode.\");\n};\nexport const navigationDisabled = () => {\n  console.warn(\"Navigation is only accessible when you enable it in module options.\");\n  console.warn(\"Learn more by visiting: https://content.nuxt.com/get-started/configuration#navigation\");\n  throw new Error(\"Navigation is only accessible when you enable it in module options.\");\n};\nexport const addPrerenderPath = (path) => {\n  const event = useRequestEvent();\n  if (event) {\n    event.node.res.setHeader(\n      \"x-nitro-prerender\",\n      [\n        event.node.res.getHeader(\"x-nitro-prerender\"),\n        path\n      ].filter(Boolean).join(\",\")\n    );\n  }\n};\nexport const shouldUseClientDB = () => {\n  const { experimental } = useRuntimeConfig().public.content;\n  if (import.meta.server) {\n    return false;\n  }\n  if (experimental.clientDB) {\n    return true;\n  }\n  return useContentPreview().isEnabled();\n};\n","import { joinURL, withLeadingSlash, withoutTrailingSlash } from \"ufo\";\nimport { hash } from \"ohash\";\nimport { createQuery } from \"../../query/query.js\";\nimport { encodeQueryParams } from \"../../utils/query.js\";\nimport { jsonStringify } from \"../../utils/json.js\";\nimport { addPrerenderPath, shouldUseClientDB, withContentBase } from \"../../composables/utils.js\";\nimport { useContentPreview } from \"../../composables/preview.js\";\nimport { useRuntimeConfig } from \"#imports\";\nexport const createQueryFetch = () => async (query) => {\n  const { content } = useRuntimeConfig().public;\n  const params = query.params();\n  const apiPath = content.experimental.stripQueryParameters ? withContentBase(`/query/${import.meta.dev ? \"_\" : `${hash(params)}.${content.integrity}`}/${encodeQueryParams(params)}.json`) : withContentBase(import.meta.dev ? \"/query\" : `/query/${hash(params)}.${content.integrity}.json`);\n  if (!import.meta.dev && import.meta.server) {\n    addPrerenderPath(apiPath);\n  }\n  if (shouldUseClientDB()) {\n    const db = await import(\"./client-db.js\").then((m) => m.useContentDatabase());\n    return db.fetch(query);\n  }\n  const data = await $fetch(apiPath, {\n    method: \"GET\",\n    responseType: \"json\",\n    params: content.experimental.stripQueryParameters ? void 0 : {\n      _params: jsonStringify(params),\n      previewToken: useContentPreview().getPreviewToken()\n    }\n  });\n  if (typeof data === \"string\" && data.startsWith(\"<!DOCTYPE html>\")) {\n    throw new Error(\"Not found\");\n  }\n  return data;\n};\nexport function queryContent(query, ...pathParts) {\n  const { content } = useRuntimeConfig().public;\n  const queryBuilder = createQuery(createQueryFetch(), {\n    initialParams: typeof query !== \"string\" ? query : {},\n    legacy: true\n  });\n  let path;\n  if (typeof query === \"string\") {\n    path = withLeadingSlash(joinURL(query, ...pathParts));\n  }\n  const originalParamsFn = queryBuilder.params;\n  queryBuilder.params = () => {\n    const params = originalParamsFn();\n    if (path) {\n      params.where = params.where || [];\n      if (params.first && (params.where || []).length === 0) {\n        params.where.push({ _path: withoutTrailingSlash(path) });\n      } else {\n        params.where.push({ _path: new RegExp(`^${path.replace(/[-[\\]{}()*+.,^$\\s/]/g, \"\\\\$&\")}`) });\n      }\n    }\n    if (!params.sort?.length) {\n      params.sort = [{ _stem: 1, $numeric: true }];\n    }\n    if (content.locales.length) {\n      const queryLocale = params.where?.find((w) => w._locale)?._locale;\n      if (!queryLocale) {\n        params.where = params.where || [];\n        params.where.push({ _locale: content.defaultLocale });\n      }\n    }\n    return params;\n  };\n  return queryBuilder;\n}\n"],"names":["get","obj","path","split","reduce","acc","part","_pick","condition","Object","keys","filter","newObj","key","assign","omit","length","includes","apply","fn","data","Array","isArray","map","item","detectProperties","prefixes","properties","push","withoutKeys","withKeys","sortList","params","comperable","Intl","Collator","$locale","numeric","$numeric","caseFirst","$caseFirst","sensitivity","$sensitivity","startsWith","sort","a","b","values","value","Date","toISOString","reverse","compare","assertArray","message","TypeError","ensureArray","arrayParams","createQuery","fetcher","opts","queryParams","initialParams","$set","v","query","resolveResult","result","legacy","surround","dirConfig","_path","_dir","prototype","hasOwnProperty","call","where","only","without","q","limit","parseInt","String","skip","find","then","findOne","count","locale","_locale","withSurround","surroundQuery","options","withDirConfig","findSurround","jsonStringify","JSON","stringify","regExpReplacer","_key","RegExp","toString","encodeQueryParams","encoded","Buffer","from","btoa","replace","match","join","withContentBase","url","withBase","useRuntimeConfig","public","content","api","baseURL","useContentDisabled","Error","addPrerenderPath","event","useRequestEvent","node","res","setHeader","getHeader","Boolean","shouldUseClientDB","experimental","queryContent","pathParts","queryBuilder","async","apiPath","stripQueryParameters","hash","integrity","import","m","useContentDatabase","fetch","$fetch","method","responseType","_params","previewToken","useContentPreview","getPreviewToken","withLeadingSlash","joinURL","originalParamsFn","first","withoutTrailingSlash","_stem","locales","queryLocale","w","defaultLocale"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}