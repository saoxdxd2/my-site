{"version":3,"file":"ContentRenderer-CvZWc5hu.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentRenderer.vue"],"sourcesContent":["<script>\nimport { defineComponent, watch, h, useSlots } from \"vue\";\nimport ContentRendererMarkdown from \"./ContentRendererMarkdown.vue\";\nexport default defineComponent({\n  name: \"ContentRenderer\",\n  props: {\n    /**\n     * The document to render.\n     */\n    value: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  setup(props) {\n    watch(\n      () => props.excerpt,\n      (newExcerpt) => {\n        if (newExcerpt && !props.value?.excerpt) {\n          console.warn(`No excerpt found for document content/${props?.value?._path}.${props?.value?._extension}!`);\n          console.warn(\"Make sure to use <!--more--> in your content if you want to use excerpt feature.\");\n        }\n      },\n      {\n        immediate: true\n      }\n    );\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { value, excerpt, tag } = ctx;\n    const markdownAST = excerpt ? value?.excerpt : value?.body;\n    if (!markdownAST?.children?.length && slots?.empty) {\n      return slots.empty({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (slots?.default) {\n      return slots.default({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (markdownAST?.type === \"root\" && markdownAST?.children?.length) {\n      return h(\n        ContentRendererMarkdown,\n        {\n          value,\n          excerpt,\n          tag,\n          ...this.$attrs\n        }\n      );\n    }\n    return h(\n      \"pre\",\n      null,\n      JSON.stringify({ message: \"You should use slots with <ContentRenderer>\", value, excerpt, tag }, null, 2)\n    );\n  }\n});\n</script>\n"],"names":["_sfc_main","defineComponent","name","props","value","type","Object","required","default","excerpt","Boolean","tag","String","setup","watch","newExcerpt","immediate","render","ctx","slots","useSlots","markdownAST","body","children","length","empty","this","$attrs","h","ContentRendererMarkdown","JSON","stringify","message"],"mappings":"irCAGA,MAAKA,EAAaC,EAAa,CAC7BC,KAAM,kBACNC,MAAO,CAILC,MAAO,CACLC,KAAMC,OACNC,UAAU,EACVC,QAAS,MAAO,IAMlBC,QAAS,CACPJ,KAAMK,QACNF,SAAS,GAMXG,IAAK,CACHN,KAAMO,OACNJ,QAAS,QAGb,KAAAK,CAAMV,GACJW,EACE,IAAMX,EAAMM,QACXM,IACKA,GAAeZ,EAAMC,OAK3B,CACEY,WAAW,GAGjB,EAKA,MAAAC,CAAOC,GACL,MAAMC,EAAQC,KACRhB,MAAEA,EAAAK,QAAOA,EAAAE,IAASA,GAAQO,EAC1BG,EAAcZ,EAAUL,GAAOK,QAAUL,GAAOkB,KACtD,OAAKD,GAAaE,UAAUC,QAAUL,GAAOM,MACpCN,EAAMM,MAAM,CAAErB,QAAOK,UAASE,SAAQe,KAAKC,SAEhDR,GAAOX,QACFW,EAAMX,QAAQ,CAAEJ,QAAOK,UAASE,SAAQe,KAAKC,SAE5B,SAAtBN,GAAahB,MAAmBgB,GAAaE,UAAUC,OAClDI,EACLC,EACA,CACEzB,QACAK,UACAE,SACGe,KAAKC,SAIPC,EACL,MACA,KACAE,KAAKC,UAAU,CAAEC,QAAS,8CAA+C5B,QAAOK,UAASE,OAAO,KAAM,GAE1G","x_google_ignoreList":[0]}