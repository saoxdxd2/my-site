{"version":3,"file":"node-Co_CclnQ.js","sources":["../../../../node_modules/@nuxtjs/mdc/dist/runtime/utils/node.js"],"sourcesContent":["export const TEXT_TAGS = [\"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"li\"];\nexport function isTag(vnode, tag) {\n  if (vnode.type === tag) {\n    return true;\n  }\n  if (typeof vnode.type === \"object\" && vnode.type.tag === tag) {\n    return true;\n  }\n  if (vnode.tag === tag) {\n    return true;\n  }\n  return false;\n}\nexport function isText(vnode) {\n  return isTag(vnode, \"text\") || isTag(vnode, Symbol.for(\"v-txt\"));\n}\nexport function nodeChildren(node) {\n  if (Array.isArray(node.children) || typeof node.children === \"string\") {\n    return node.children;\n  }\n  if (typeof node.children?.default === \"function\") {\n    return node.children.default();\n  }\n  return [];\n}\nexport function nodeTextContent(node) {\n  if (!node) {\n    return \"\";\n  }\n  if (Array.isArray(node)) {\n    return node.map(nodeTextContent).join(\"\");\n  }\n  if (isText(node)) {\n    return node.children || node.value || \"\";\n  }\n  const children = nodeChildren(node);\n  if (Array.isArray(children)) {\n    return children.map(nodeTextContent).filter(Boolean).join(\"\");\n  }\n  return \"\";\n}\nexport function unwrap(vnode, tags = []) {\n  if (Array.isArray(vnode)) {\n    return vnode.flatMap((node) => unwrap(node, tags));\n  }\n  let result = vnode;\n  if (tags.some((tag) => tag === \"*\" || isTag(vnode, tag))) {\n    result = nodeChildren(vnode) || vnode;\n    if (!Array.isArray(result) && TEXT_TAGS.some((tag) => isTag(vnode, tag))) {\n      result = [result];\n    }\n  }\n  return result;\n}\nfunction _flatUnwrap(vnodes, tags = []) {\n  vnodes = Array.isArray(vnodes) ? vnodes : [vnodes];\n  if (!tags.length) {\n    return vnodes;\n  }\n  return vnodes.flatMap((vnode) => _flatUnwrap(unwrap(vnode, [tags[0]]), tags.slice(1))).filter((vnode) => !(isText(vnode) && nodeTextContent(vnode).trim() === \"\"));\n}\nexport function flatUnwrap(vnodes, tags = []) {\n  if (typeof tags === \"string\") {\n    tags = tags.split(/[,\\s]/).map((tag) => tag.trim()).filter(Boolean);\n  }\n  if (!tags.length) {\n    return vnodes;\n  }\n  return _flatUnwrap(vnodes, tags).reduce((acc, item) => {\n    if (isText(item)) {\n      if (typeof acc[acc.length - 1] === \"string\") {\n        acc[acc.length - 1] += item.children;\n      } else {\n        acc.push(item.children);\n      }\n    } else {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n}\n"],"names":["TEXT_TAGS","isTag","vnode","tag","type","isText","Symbol","for","nodeChildren","node","Array","isArray","children","default","nodeTextContent","map","join","value","filter","Boolean","unwrap","tags","flatMap","result","some","_flatUnwrap","vnodes","length","slice","trim","flatUnwrap","split","reduce","acc","item","push"],"mappings":"AAAO,MAAMA,EAAY,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5D,SAASC,EAAMC,EAAOC,GAC3B,OAAID,EAAME,OAASD,IAGO,iBAAfD,EAAME,MAAqBF,EAAME,KAAKD,MAAQA,GAGrDD,EAAMC,MAAQA,EAIpB,CACO,SAASE,EAAOH,GACrB,OAAOD,EAAMC,EAAO,SAAWD,EAAMC,EAAOI,OAAOC,IAAI,SACzD,CACO,SAASC,EAAaC,GAC3B,OAAIC,MAAMC,QAAQF,EAAKG,WAAsC,iBAAlBH,EAAKG,SACvCH,EAAKG,SAEwB,mBAA3BH,EAAKG,UAAUC,QACjBJ,EAAKG,SAASC,UAEhB,EACT,CACO,SAASC,EAAgBL,GAC9B,IAAKA,EACH,MAAO,GAET,GAAIC,MAAMC,QAAQF,GAChB,OAAOA,EAAKM,IAAID,GAAiBE,KAAK,IAExC,GAAIX,EAAOI,GACT,OAAOA,EAAKG,UAAYH,EAAKQ,OAAS,GAExC,MAAML,EAAWJ,EAAaC,GAC9B,OAAIC,MAAMC,QAAQC,GACTA,EAASG,IAAID,GAAiBI,OAAOC,SAASH,KAAK,IAErD,EACT,CACO,SAASI,EAAOlB,EAAOmB,EAAO,IACnC,GAAIX,MAAMC,QAAQT,GAChB,OAAOA,EAAMoB,QAASb,GAASW,EAAOX,EAAMY,IAE9C,IAAIE,EAASrB,EAOb,OANImB,EAAKG,KAAMrB,GAAgB,MAARA,GAAeF,EAAMC,EAAOC,MACjDoB,EAASf,EAAaN,IAAUA,GAC3BQ,MAAMC,QAAQY,IAAWvB,EAAUwB,KAAMrB,GAAQF,EAAMC,EAAOC,MACjEoB,EAAS,CAACA,KAGPA,CACT,CACA,SAASE,EAAYC,EAAQL,EAAO,IAElC,OADAK,EAAShB,MAAMC,QAAQe,GAAUA,EAAS,CAACA,GACtCL,EAAKM,OAGHD,EAAOJ,QAASpB,GAAUuB,EAAYL,EAAOlB,EAAO,CAACmB,EAAK,KAAMA,EAAKO,MAAM,KAAKV,OAAQhB,KAAYG,EAAOH,IAA4C,KAAlCY,EAAgBZ,GAAO2B,SAF1IH,CAGX,CACO,SAASI,EAAWJ,EAAQL,EAAO,IAIxC,MAHoB,iBAATA,IACTA,EAAOA,EAAKU,MAAM,SAAShB,IAAKZ,GAAQA,EAAI0B,QAAQX,OAAOC,UAExDE,EAAKM,OAGHF,EAAYC,EAAQL,GAAMW,OAAO,CAACC,EAAKC,KACxC7B,EAAO6B,GAC0B,iBAAxBD,EAAIA,EAAIN,OAAS,GAC1BM,EAAIA,EAAIN,OAAS,IAAMO,EAAKtB,SAE5BqB,EAAIE,KAAKD,EAAKtB,UAGhBqB,EAAIE,KAAKD,GAEJD,GACN,IAbMP,CAcX","x_google_ignoreList":[0]}