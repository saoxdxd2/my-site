{"version":3,"file":"ContentQuery-DsWfmzyM.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue"],"sourcesContent":["<script>\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots, watch } from \"vue\";\nimport { computed, useAsyncData, queryContent, useRuntimeConfig } from \"#imports\";\nconst ContentQuery = defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    /**\n     * The path of the content to load from content source.\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Select a subset of fields\n     */\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Remove a subset of fields\n     */\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter results\n     */\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Sort results\n     */\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Limit number of results\n     */\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Skip number of results\n     */\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter contents based on locale\n     */\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A type of query to be made.\n     */\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    const legacy = !useRuntimeConfig().public.content.experimental.advanceQuery;\n    watch(() => props, () => refresh(), { deep: true });\n    const resolveResult = (result) => {\n      if (legacy) {\n        if (result?.surround) {\n          return result.surround;\n        }\n        return result?._id || Array.isArray(result) ? result : result?.result;\n      }\n      return result.result;\n    };\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne().then(resolveResult);\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find().then(resolveResult);\n          }\n          if (legacy) {\n            return queryBuilder.findSurround(path.value);\n          } else {\n            return queryBuilder.withSurround(path.value).findOne().then(resolveResult);\n          }\n        }\n        return queryBuilder.find().then(resolveResult);\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      // Setup\n      data,\n      refresh,\n      isPartial,\n      // Props\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (slots?.empty && data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\nexport default ContentQuery;\n</script>\n"],"names":["defineComponent","name","props","path","type","String","required","default","only","Array","without","where","Object","sort","limit","Number","skip","locale","find","setup","toRefs","isPartial","computed","value","includes","legacy","useRuntimeConfig","public","content","experimental","advanceQuery","watch","refresh","deep","resolveResult","result","surround","_id","isArray","data","useAsyncData","hash","queryBuilder","queryContent","_locale","findOne","then","findSurround","withSurround","render","ctx","slots","useSlots","this","$attrs","empty","_type","body","children","length","slot","data2","h","JSON","stringify","message"],"mappings":"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","x_google_ignoreList":[0]}