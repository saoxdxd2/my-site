{"version":3,"file":"ContentNavigation-C898HnvL.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentNavigation.vue","../../../../node_modules/nuxt/dist/app/composables/state.js","../../../../node_modules/@nuxt/content/dist/runtime/legacy/composables/navigation.js"],"sourcesContent":["<script>\nimport { toRefs, defineComponent, h, useSlots, computed } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useAsyncData, fetchContentNavigation, useState, useContent } from \"#imports\";\nimport { NuxtLink } from \"#components\";\nconst ContentNavigation = defineComponent({\n  name: \"ContentNavigation\",\n  props: {\n    /**\n     * A query to be passed to `fetchContentNavigation()`.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      query\n    } = toRefs(props);\n    const queryBuilder = computed(() => {\n      if (typeof query.value?.params === \"function\") {\n        return query.value.params();\n      }\n      return query.value;\n    });\n    if (!queryBuilder.value && useState(\"dd-navigation\").value) {\n      const { navigation: navigation2 } = useContent();\n      return { navigation: navigation2 };\n    }\n    const { data: navigation } = await useAsyncData(\n      `content-navigation-${hash(queryBuilder.value)}`,\n      () => fetchContentNavigation(queryBuilder.value)\n    );\n    return { navigation };\n  },\n  /**\n   * Navigation empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { navigation } = ctx;\n    const renderLink = (link) => h(NuxtLink, { to: link._path }, () => link.title);\n    const renderLinks = (data, level) => h(\n      \"ul\",\n      level ? { \"data-level\": level } : null,\n      data.map((link) => {\n        if (link.children) {\n          return h(\"li\", null, [renderLink(link), renderLinks(link.children, level + 1)]);\n        }\n        return h(\"li\", null, renderLink(link));\n      })\n    );\n    const defaultNode = (data) => renderLinks(data, 0);\n    return slots?.default ? slots.default({ navigation, ...this.$attrs }) : defaultNode(navigation);\n  }\n});\nexport default ContentNavigation;\n</script>\n","import { isRef, toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nconst useStateKeyPrefix = \"$s\";\nexport function useState(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [_key, init] = args;\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useState] key must be a string: \" + _key);\n  }\n  if (init !== void 0 && typeof init !== \"function\") {\n    throw new Error(\"[nuxt] [useState] init must be a function: \" + init);\n  }\n  const key = useStateKeyPrefix + _key;\n  const nuxtApp = useNuxtApp();\n  const state = toRef(nuxtApp.payload.state, key);\n  if (state.value === void 0 && init) {\n    const initialValue = init();\n    if (isRef(initialValue)) {\n      nuxtApp.payload.state[key] = initialValue;\n      return initialValue;\n    }\n    state.value = initialValue;\n  }\n  return state;\n}\nexport function clearNuxtState(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const _key of _keys) {\n    const key = useStateKeyPrefix + _key;\n    if (key in nuxtApp.payload.state) {\n      nuxtApp.payload.state[key] = void 0;\n    }\n  }\n}\n","import { hash } from \"ohash\";\nimport { encodeQueryParams } from \"../../utils/query.js\";\nimport { jsonStringify } from \"../../utils/json.js\";\nimport { addPrerenderPath, shouldUseClientDB, withContentBase } from \"../../composables/utils.js\";\nimport { useContentPreview } from \"../../composables/preview.js\";\nimport { queryContent } from \"./query.js\";\nimport { useRuntimeConfig } from \"#imports\";\nexport const fetchContentNavigation = async (queryBuilder) => {\n  const { content } = useRuntimeConfig().public;\n  if (typeof queryBuilder?.params !== \"function\") {\n    queryBuilder = queryContent(queryBuilder);\n  }\n  const params = queryBuilder.params();\n  const apiPath = content.experimental.stripQueryParameters ? withContentBase(`/navigation/${import.meta.dev ? \"_\" : `${hash(params)}.${content.integrity}`}/${encodeQueryParams(params)}.json`) : withContentBase(import.meta.dev ? `/navigation/${hash(params)}` : `/navigation/${hash(params)}.${content.integrity}.json`);\n  if (!import.meta.dev && import.meta.server) {\n    addPrerenderPath(apiPath);\n  }\n  if (shouldUseClientDB()) {\n    const generateNavigation = await import(\"./client-db.js\").then((m) => m.generateNavigation);\n    return generateNavigation(params);\n  }\n  const data = await $fetch(apiPath, {\n    method: \"GET\",\n    responseType: \"json\",\n    params: content.experimental.stripQueryParameters ? void 0 : {\n      _params: jsonStringify(params),\n      previewToken: useContentPreview().getPreviewToken()\n    }\n  });\n  if (typeof data === \"string\" && data.startsWith(\"<!DOCTYPE html>\")) {\n    throw new Error(\"Not found\");\n  }\n  return data;\n};\n"],"names":["_sfc_main","defineComponent","name","props","query","type","Object","required","default","setup","toRefs","queryBuilder","computed","value","params","args","autoKey","length","pop","unshift","_key","init","TypeError","Error","key","nuxtApp","useNuxtApp","state","toRef","payload","initialValue","isRef","useState","navigation","navigation2","useContent","data","useAsyncData","hash","async","content","useRuntimeConfig","public","queryContent","apiPath","experimental","stripQueryParameters","withContentBase","integrity","encodeQueryParams","addPrerenderPath","shouldUseClientDB","import","then","m","generateNavigation","$fetch","method","responseType","_params","jsonStringify","previewToken","useContentPreview","getPreviewToken","startsWith","fetchContentNavigation","render","ctx","slots","useSlots","renderLink","link","h","NuxtLink","to","_path","title","renderLinks","level","map","children","this","$attrs"],"mappings":"+/CAKA,MAsDKA,EAtDqBC,EAAgB,CACxCC,KAAM,oBACNC,MAAO,CAILC,MAAO,CACLC,KAAMC,OACNC,UAAU,EACVC,aAAS,IAGb,WAAMC,CAAMN,GACV,MAAMC,MACJA,GACEM,EAAOP,GACLQ,EAAeC,EAAS,IACO,mBAAxBR,EAAMS,OAAOC,OACfV,EAAMS,MAAMC,SAEdV,EAAMS,OAEf,IAAKF,EAAaE,OCvBf,YAAqBE,GAC1B,MAAMC,EAA2C,iBAA1BD,EAAKA,EAAKE,OAAS,GAAkBF,EAAKG,WAAQ,EAClD,iBAAZH,EAAK,IACdA,EAAKI,QAAQH,GAEf,MAAOI,EAAMC,GAAQN,EACrB,IAAKK,GAAwB,iBAATA,EAClB,MAAM,IAAIE,UAAU,2CAA6CF,GAEnE,QAAa,IAATC,GAAmC,mBAATA,EAC5B,MAAM,IAAIE,MAAM,8CAAgDF,GAElE,MAAMG,EAbkB,KAaQJ,EAC1BK,EAAUC,IACVC,EAAQC,EAAMH,EAAQI,QAAQF,MAAOH,GAC3C,QAAoB,IAAhBG,EAAMd,OAAoBQ,EAAM,CAClC,MAAMS,EAAeT,IACrB,GAAIU,EAAMD,GAER,OADAL,EAAQI,QAAQF,MAAMH,GAAOM,EACtBA,EAETH,EAAMd,MAAQiB,CAChB,CACA,OAAOH,CACT,CDD+BK,CAAS,iBAAiBnB,MAAO,CAC1D,MAAQoB,WAAYC,GAAgBC,IACpC,MAAO,CAAEF,WAAYC,EACvB,CACA,MAAQE,KAAMH,SAAqBI,EACjC,sBAAsBC,EAAK3B,EAAaE,SACxC,IE1BgC0B,OAAO5B,IAC3C,MAAM6B,QAAEA,GAAYC,IAAmBC,OACH,mBAAzB/B,GAAcG,SACvBH,EAAegC,EAAahC,IAE9B,MAAMG,EAASH,EAAaG,SACtB8B,EAAUJ,EAAQK,aAAaC,qBAAuBC,EAAgB,eAA0CT,EAAKxB,MAAW0B,EAAQQ,aAAeC,EAAkBnC,WAAkBiC,EAAkE,eAAeT,EAAKxB,MAAW0B,EAAQQ,kBAI1S,GAFEE,EAAiBN,GAEfO,IAEF,aADiCC,OAAO,2BAAkBC,KAAMC,GAAMA,EAAEC,qBAC9CzC,GAE5B,MAAMsB,QAAaoB,OAAOZ,EAAS,CACjCa,OAAQ,MACRC,aAAc,OACd5C,OAAQ0B,EAAQK,aAAaC,0BAAuB,EAAS,CAC3Da,QAASC,EAAc9C,GACvB+C,aAAcC,IAAoBC,qBAGtC,GAAoB,iBAAT3B,GAAqBA,EAAK4B,WAAW,mBAC9C,MAAM,IAAIzC,MAAM,aAElB,OAAOa,GFCG6B,CAAuBtD,EAAaE,QAE5C,MAAO,CAAEoB,aACX,EAKA,MAAAiC,CAAOC,GACL,MAAMC,EAAQC,KACRpC,WAAEA,GAAekC,EACjBG,EAAcC,GAASC,EAAEC,EAAU,CAAEC,GAAIH,EAAKI,OAAS,IAAMJ,EAAKK,OAClEC,EAAc,CAACzC,EAAM0C,IAAUN,EACnC,KACAM,EAAQ,CAAE,aAAcA,GAAU,KAClC1C,EAAK2C,IAAKR,GACJA,EAAKS,SACAR,EAAE,KAAM,KAAM,CAACF,EAAWC,GAAOM,EAAYN,EAAKS,SAAUF,EAAQ,KAEtEN,EAAE,KAAM,KAAMF,EAAWC,MAIpC,OAAOH,GAAO5D,QAAU4D,EAAM5D,QAAQ,CAAEyB,gBAAegD,KAAKC,SAD9BL,EACsD5C,EADpC,EAElD","x_google_ignoreList":[0,1,2]}